// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "rzd/app/entity"
import http "net/http"
import mock "github.com/stretchr/testify/mock"

// RzdGateway is an autogenerated mock type for the RzdGateway type
type RzdGateway struct {
	mock.Mock
}

// GetDirectionsCode provides a mock function with given fields: source
func (_m *RzdGateway) GetDirectionsCode(source string) (int, error) {
	ret := _m.Called(source)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(source)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfoAboutOneTrain provides a mock function with given fields: train, cookie
func (_m *RzdGateway) GetInfoAboutOneTrain(train entity.Train, cookie []*http.Cookie) (entity.Route, error) {
	ret := _m.Called(train, cookie)

	var r0 entity.Route
	if rf, ok := ret.Get(0).(func(entity.Train, []*http.Cookie) entity.Route); ok {
		r0 = rf(train, cookie)
	} else {
		r0 = ret.Get(0).(entity.Route)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Train, []*http.Cookie) error); ok {
		r1 = rf(train, cookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRid provides a mock function with given fields: args
func (_m *RzdGateway) GetRid(args entity.RidArgs) (entity.Rid, []*http.Cookie, error) {
	ret := _m.Called(args)

	var r0 entity.Rid
	if rf, ok := ret.Get(0).(func(entity.RidArgs) entity.Rid); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(entity.Rid)
	}

	var r1 []*http.Cookie
	if rf, ok := ret.Get(1).(func(entity.RidArgs) []*http.Cookie); ok {
		r1 = rf(args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*http.Cookie)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(entity.RidArgs) error); ok {
		r2 = rf(args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRoutes provides a mock function with given fields: args, cookie
func (_m *RzdGateway) GetRoutes(args entity.RouteArgs, cookie []*http.Cookie) (entity.Route, error) {
	ret := _m.Called(args, cookie)

	var r0 entity.Route
	if rf, ok := ret.Get(0).(func(entity.RouteArgs, []*http.Cookie) entity.Route); ok {
		r0 = rf(args, cookie)
	} else {
		r0 = ret.Get(0).(entity.Route)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.RouteArgs, []*http.Cookie) error); ok {
		r1 = rf(args, cookie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
