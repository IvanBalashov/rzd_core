// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "rzd/app/entity"
import mock "github.com/stretchr/testify/mock"

// TrainsGateway is an autogenerated mock type for the TrainsGateway type
type TrainsGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: train
func (_m *TrainsGateway) Create(train entity.Train) (string, error) {
	ret := _m.Called(train)

	var r0 string
	if rf, ok := ret.Get(0).(func(entity.Train) string); ok {
		r0 = rf(train)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Train) error); ok {
		r1 = rf(train)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: train
func (_m *TrainsGateway) Delete(train entity.Train) error {
	ret := _m.Called(train)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Train) error); ok {
		r0 = rf(train)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMany provides a mock function with given fields:
func (_m *TrainsGateway) ReadMany() ([]entity.Train, error) {
	ret := _m.Called()

	var r0 []entity.Train
	if rf, ok := ret.Get(0).(func() []entity.Train); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Train)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOne provides a mock function with given fields: trainID
func (_m *TrainsGateway) ReadOne(trainID string) (entity.Train, error) {
	ret := _m.Called(trainID)

	var r0 entity.Train
	if rf, ok := ret.Get(0).(func(string) entity.Train); ok {
		r0 = rf(trainID)
	} else {
		r0 = ret.Get(0).(entity.Train)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(trainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: train
func (_m *TrainsGateway) Update(train entity.Train) error {
	ret := _m.Called(train)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Train) error); ok {
		r0 = rf(train)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
