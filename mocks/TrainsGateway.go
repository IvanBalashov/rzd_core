// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "rzd/app/entity"
import mock "github.com/stretchr/testify/mock"

// TrainsGateway is an autogenerated mock type for the TrainsGateway type
type TrainsGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *TrainsGateway) Create(user *entity.Train) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(*entity.Train) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Train) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: user
func (_m *TrainsGateway) Delete(user *entity.Train) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Train) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMany provides a mock function with given fields:
func (_m *TrainsGateway) ReadMany() ([]*entity.Train, error) {
	ret := _m.Called()

	var r0 []*entity.Train
	if rf, ok := ret.Get(0).(func() []*entity.Train); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Train)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOne provides a mock function with given fields: filter
func (_m *TrainsGateway) ReadOne(filter *entity.Train) (*entity.Train, error) {
	ret := _m.Called(filter)

	var r0 *entity.Train
	if rf, ok := ret.Get(0).(func(*entity.Train) *entity.Train); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Train)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Train) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSection provides a mock function with given fields: start, end
func (_m *TrainsGateway) ReadSection(start int64, end int64) ([]*entity.Train, error) {
	ret := _m.Called(start, end)

	var r0 []*entity.Train
	if rf, ok := ret.Get(0).(func(int64, int64) []*entity.Train); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Train)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *TrainsGateway) Update(user *entity.Train) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Train) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
